/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as ProtectedClientRouteRouteImport } from './routes/_protected/client/route'
import { Route as ProtectedAdminRouteRouteImport } from './routes/_protected/admin/route'
import { Route as ProtectedClientPostsRouteRouteImport } from './routes/_protected/client/posts/route'
import { Route as ProtectedAdminPostsRouteRouteImport } from './routes/_protected/admin/posts/route'
import { Route as ProtectedAdminPaymentsRouteRouteImport } from './routes/_protected/admin/payments/route'
import { Route as ProtectedClientDashboardIndexRouteImport } from './routes/_protected/client/dashboard/index'
import { Route as ProtectedAdminDashboardIndexRouteImport } from './routes/_protected/admin/dashboard/index'

const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedClientRouteRoute = ProtectedClientRouteRouteImport.update({
  id: '/client',
  path: '/client',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedAdminRouteRoute = ProtectedAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedClientPostsRouteRoute =
  ProtectedClientPostsRouteRouteImport.update({
    id: '/posts',
    path: '/posts',
    getParentRoute: () => ProtectedClientRouteRoute,
  } as any)
const ProtectedAdminPostsRouteRoute =
  ProtectedAdminPostsRouteRouteImport.update({
    id: '/posts',
    path: '/posts',
    getParentRoute: () => ProtectedAdminRouteRoute,
  } as any)
const ProtectedAdminPaymentsRouteRoute =
  ProtectedAdminPaymentsRouteRouteImport.update({
    id: '/payments',
    path: '/payments',
    getParentRoute: () => ProtectedAdminRouteRoute,
  } as any)
const ProtectedClientDashboardIndexRoute =
  ProtectedClientDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => ProtectedClientRouteRoute,
  } as any)
const ProtectedAdminDashboardIndexRoute =
  ProtectedAdminDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => ProtectedAdminRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/client': typeof ProtectedClientRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin/payments': typeof ProtectedAdminPaymentsRouteRoute
  '/admin/posts': typeof ProtectedAdminPostsRouteRoute
  '/client/posts': typeof ProtectedClientPostsRouteRoute
  '/admin/dashboard': typeof ProtectedAdminDashboardIndexRoute
  '/client/dashboard': typeof ProtectedClientDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/client': typeof ProtectedClientRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin/payments': typeof ProtectedAdminPaymentsRouteRoute
  '/admin/posts': typeof ProtectedAdminPostsRouteRoute
  '/client/posts': typeof ProtectedClientPostsRouteRoute
  '/admin/dashboard': typeof ProtectedAdminDashboardIndexRoute
  '/client/dashboard': typeof ProtectedClientDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_protected/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/_protected/client': typeof ProtectedClientRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_protected/admin/payments': typeof ProtectedAdminPaymentsRouteRoute
  '/_protected/admin/posts': typeof ProtectedAdminPostsRouteRoute
  '/_protected/client/posts': typeof ProtectedClientPostsRouteRoute
  '/_protected/admin/dashboard/': typeof ProtectedAdminDashboardIndexRoute
  '/_protected/client/dashboard/': typeof ProtectedClientDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/client'
    | '/login'
    | '/register'
    | '/demo/tanstack-query'
    | '/admin/payments'
    | '/admin/posts'
    | '/client/posts'
    | '/admin/dashboard'
    | '/client/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/client'
    | '/login'
    | '/register'
    | '/demo/tanstack-query'
    | '/admin/payments'
    | '/admin/posts'
    | '/client/posts'
    | '/admin/dashboard'
    | '/client/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/admin'
    | '/_protected/client'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/demo/tanstack-query'
    | '/_protected/admin/payments'
    | '/_protected/admin/posts'
    | '/_protected/client/posts'
    | '/_protected/admin/dashboard/'
    | '/_protected/client/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/client': {
      id: '/_protected/client'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof ProtectedClientRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/admin': {
      id: '/_protected/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/client/posts': {
      id: '/_protected/client/posts'
      path: '/posts'
      fullPath: '/client/posts'
      preLoaderRoute: typeof ProtectedClientPostsRouteRouteImport
      parentRoute: typeof ProtectedClientRouteRoute
    }
    '/_protected/admin/posts': {
      id: '/_protected/admin/posts'
      path: '/posts'
      fullPath: '/admin/posts'
      preLoaderRoute: typeof ProtectedAdminPostsRouteRouteImport
      parentRoute: typeof ProtectedAdminRouteRoute
    }
    '/_protected/admin/payments': {
      id: '/_protected/admin/payments'
      path: '/payments'
      fullPath: '/admin/payments'
      preLoaderRoute: typeof ProtectedAdminPaymentsRouteRouteImport
      parentRoute: typeof ProtectedAdminRouteRoute
    }
    '/_protected/client/dashboard/': {
      id: '/_protected/client/dashboard/'
      path: '/dashboard'
      fullPath: '/client/dashboard'
      preLoaderRoute: typeof ProtectedClientDashboardIndexRouteImport
      parentRoute: typeof ProtectedClientRouteRoute
    }
    '/_protected/admin/dashboard/': {
      id: '/_protected/admin/dashboard/'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof ProtectedAdminDashboardIndexRouteImport
      parentRoute: typeof ProtectedAdminRouteRoute
    }
  }
}

interface ProtectedAdminRouteRouteChildren {
  ProtectedAdminPaymentsRouteRoute: typeof ProtectedAdminPaymentsRouteRoute
  ProtectedAdminPostsRouteRoute: typeof ProtectedAdminPostsRouteRoute
  ProtectedAdminDashboardIndexRoute: typeof ProtectedAdminDashboardIndexRoute
}

const ProtectedAdminRouteRouteChildren: ProtectedAdminRouteRouteChildren = {
  ProtectedAdminPaymentsRouteRoute: ProtectedAdminPaymentsRouteRoute,
  ProtectedAdminPostsRouteRoute: ProtectedAdminPostsRouteRoute,
  ProtectedAdminDashboardIndexRoute: ProtectedAdminDashboardIndexRoute,
}

const ProtectedAdminRouteRouteWithChildren =
  ProtectedAdminRouteRoute._addFileChildren(ProtectedAdminRouteRouteChildren)

interface ProtectedClientRouteRouteChildren {
  ProtectedClientPostsRouteRoute: typeof ProtectedClientPostsRouteRoute
  ProtectedClientDashboardIndexRoute: typeof ProtectedClientDashboardIndexRoute
}

const ProtectedClientRouteRouteChildren: ProtectedClientRouteRouteChildren = {
  ProtectedClientPostsRouteRoute: ProtectedClientPostsRouteRoute,
  ProtectedClientDashboardIndexRoute: ProtectedClientDashboardIndexRoute,
}

const ProtectedClientRouteRouteWithChildren =
  ProtectedClientRouteRoute._addFileChildren(ProtectedClientRouteRouteChildren)

interface ProtectedRouteRouteChildren {
  ProtectedAdminRouteRoute: typeof ProtectedAdminRouteRouteWithChildren
  ProtectedClientRouteRoute: typeof ProtectedClientRouteRouteWithChildren
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedAdminRouteRoute: ProtectedAdminRouteRouteWithChildren,
  ProtectedClientRouteRoute: ProtectedClientRouteRouteWithChildren,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
